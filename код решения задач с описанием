Задание 1: В каких городах больше одного аэропорта?

Логика решения: находим кол-во городов (count) в таблице аэропорты и выбираем только те, которые больше 1, т.е. 2 и и более. В результате получилось 2 города.

select count (city) as number_of_airports, city
from airports 
group by city
having count (city) > 1
---------------------------------------------------------------------------------------------

Задание 2: В каких аэропортах есть рейсы, выполняемые самолетом с максимальной дальностью перелета?

Логика решения: 
1) в подзапрос уводим определение самолета с максимальной дальностью полета (range) с таблички aircrafts. Определяем его с помощью функции max.
2) Затем к этому результату снова присоединяем табличку aircrafts, чтобы получить модель самолета и табличку flights, чтобы получить оттуда искомые аэропорты. 
3) Затем находим уникальные аэропорты, их которых вылетает самолет с нужным кодом.

select distinct departure_airport,a.aircraft_code
from (
select max (range) as mak
from aircrafts ) t
join aircrafts a on t.mak = a.range 
join flights f on f.aircraft_code = a.aircraft_code 
-----------------------------------------------------

Задание 3: Вывести 10 рейсов с максимальным временем задержки вылета

Логика решения: 
1) время задержки определяем путем вычитания из реального времени вылета планируемое время вылета. Т.е. узнаем, насколько рейс вылетел позже планируемого.
Статус "задержан" в данном случае не играет роли, т.к. рейс который уже прилетел или находится в воздухе в эту минуту, тоже мог быть задержан.
2) Убираем строки, где реальное время вылета равно null, т.к. раз этот рейс еще не вылетел, то и отклонение от планируемого мы узнать еще не можем.
3) Сортируем от большего к меньшему и выбираем первые 10 значений.

select scheduled_departure, age(actual_departure, scheduled_departure) as scheduled_time
from flights f 
where actual_departure is not null
order by scheduled_time desc
limit 10
---------------------------------------------------

Задание 4: Были ли брони, по которым не были получены посадочные талоны?

Логика решения: 
1) таблицу bookings обогащаем через left join, т.к. нам нужны все значения из bookings, поэтому берем строго left. 
2) Далее, выбираем только те значения, где посадочный null. 

select distinct b.book_ref, boarding_no
from bookings b
left join tickets t on b.book_ref = t.book_ref
left join boarding_passes bp on t.ticket_no = bp.ticket_no 
where boarding_no is null
----------------------------------------------------

Задание 5: Найдите количество свободных мест для каждого рейса, их % отношение к общему количеству мест в самолете.
Добавьте столбец с накопительным итогом - суммарное накопление количества вывезенных пассажиров из каждого аэропорта на каждый день.

1. Из таблицы ticket_flights получаем значение кол-ва билетов на каждый рейс qt. Брал билеты, а не посадочные, потому что если рейс отменен, 
то на него тоже могли быть уже куплены билеты, а посадочных нет.
Уводим в подзапрос.
2. Затем приджоинивает таблицу seats, из нее получаем кол-во мест в самолете count (seat_no) и вычитаем из этого значения qt. Полученное значение free
показывает нам, сколько мест в самолете пустые.
3. И затем высчитываем проценты  free_percent , которые показывают в процетном отношении, сколько мест в самолете пустые, т.е. free = free_percent 
4. Затем делаем 2 сte, где берем сумму кол-ва посадочных талонов (почему не билетов - билет можно сдать и не полететь, а если посадочный есть, то человек уже прошел регистрацию,
и полетит на 99,9%) и сортируем ее по аэропорту вылета. Таким образом получаем кол-во вылетевших из каждого аэропорта каждый день.
5. Соединяем cte

with cte as(
select t.flight_id , (count (seat_no) - "qt") as free, (100-"qt"*100/count (seat_no)) as percent
from (
select flight_id ,count (ticket_no) as "qt"
from ticket_flights 
group by flight_id )t
left join flights f on f.flight_id = t.flight_id
left join seats s on f.aircraft_code = s.aircraft_code
group by t.flight_id,t.qt),
cte2 as (
select distinct b.flight_id,f.actual_departure, count (boarding_no) over (partition by departure_airport order by actual_departure, count (boarding_no)) as нарастающий_по_дате,f.departure_airport
from boarding_passes b
left join flights f on f.flight_id = b.flight_id
group by b.flight_id, f.actual_departure, b.boarding_no, f.departure_airport
order by departure_airport, actual_departure)
select *
from cte,cte2
where cte.flight_id = cte2.flight_id
order by departure_airport, actual_departure
----------------------------------------------------

Задание 6
Найдите процентное соотношение перелетов по типам самолетов от общего количества.

Логика: в подзапросе выводим общее кол-во рейсов, затем кол-во рейсов по каждому самолету  х 100 и делим на кол-во рейсов. 

select distinct aircraft_code, (round (count (flight_id) over (partition by aircraft_code)) * 100 /t.count) as percent
from (
select count (flight_id)
from flights )t 
join flights f on f.aircraft_code = aircraft_code

----------------------------------------------------
Задание 7: Были ли города, в которые можно  добраться бизнес - классом дешевле, чем эконом-классом в рамках перелета?

Логика решения: 
1) делаем 2 сте: в одной берем стоимость перелетов в эконом классе, во 2 сте берем стоимость перелетов в бизнес классе. 
2) Затем с помощью where выделяем нужные нам значения.
Ответ: таких городов нет, везде бизнес дороже эконома

with cte as(
select distinct flight_id,fare_conditions,amount 
from ticket_flights tf 
where fare_conditions = 'Economy'),
cte2 as(
select distinct flight_id,fare_conditions,amount 
from ticket_flights tf 
where fare_conditions = 'Business')
select *
from cte,cte2
where cte.flight_id = cte2.flight_id and cte.amount > cte2.amount

Для сравнения поменял в таблице ticket_flights стоимость эконома с 7300 до 23000 ( а бизнес там стоит 20000), и решение выдало этот рейс. 
Значит запрос составлен верно.
----------------------------------------------------

Задание 8: Между какими городами нет прямых рейсов?

Логика:
1) Выбираем через декартово произведение все возможные пары городов из таблицы airports, убираем дубли
2) Из таблицы flights получаем все пары аэропортов прибытия и убытия. Сперва подставляем названия городов к аэропортам отправления, потом подставляем названия
к аэропортам прибытия. Получаем все пары городов, которые есть сейчас
3) С помощью except соединяем таблицы и получаем 4792 пары городов, которых нет в таблице flights, следовательно прямых рейсов между ними нет. 
4792 пары городов. Можно умножить на 2 и получить 9584 города, но информация будет недостоверная, т.к будет огромное количество дублей, поэтому оставляем парами.
4) Все это вставляем в представление и выводим результат через select * from city


CREATE VIEW city AS
select a1.city as город1, a2.city as город2
from airports a1, airports a2
where a2.city > a1.city
except
select t.city as город1, a2.city as город2
from(
select a1.city, f.departure_airport, f.arrival_airport  
from flights f 
join airports a1 on a1.airport_code = f.departure_airport)t
join airports a2 on a2.airport_code = t.arrival_airport
order by 1,2

select * from city
----------------------------------------------------
Задание 9: Вычислите расстояние между аэропортами, связанными прямыми рейсами, сравните с допустимой максимальной дальностью перелетов  в самолетах, обслуживающих эти рейсы

Логика решения:
1) В подзапросе t определяем города вылета и их координаты, между которыми есть перелеты
2) В подзапросе t2 добавляем к ним города прилета и их координаты. Получаем полный список пар городов, где есть рейсы с координатами
3) В подзапросе t3 по формуле рассчитываем расстояние в километрах между этими городами
4) Последним шагом с помозью оператора case сравниваем расстояния между городами и расстояние, которое способен пролететь самолет,
которые поставлен на рейс. Если все хорошо, то будет ок, если нет, то но_ок. Но т.к. везде получилось ок, то расчеты верны.

select t3.c1, t3.c2, t3.расстояние_км,a.range,
	case WHEN t3.расстояние_км <= a.range THEN 'ок'
		 WHEN t3.расстояние_км > a.range THEN 'no_ок'
	end 
from (
select t2.c1, t2.c2, (6371 *  (acos (sin (radians (t2.c1lt))*sin (radians (t2.a2lt)) + cos (radians (t2.c1lt)) * cos (radians (t2.a2lt)) * cos (radians (t2.c1lg - t2.a2lg))))) as расстояние_км,
t2.aircraft_code
from (
select distinct t.city as c1,t.latitude as c1lt, t.longitude as c1lg, a2.city as c2, a2.latitude as a2lt,a2.longitude as a2lg, t.aircraft_code
from(
select a1.city, f.departure_airport, latitude,longitude, f.arrival_airport, f.aircraft_code
from flights f 
join airports a1 on a1.airport_code = f.departure_airport
)t
join airports a2 on a2.airport_code = t.arrival_airport
order by 1,2 ) t2 ) t3
join aircrafts a on a.aircraft_code = t3.aircraft_code
